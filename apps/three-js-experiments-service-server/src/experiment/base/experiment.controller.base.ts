/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ExperimentService } from "../experiment.service";
import { ExperimentCreateInput } from "./ExperimentCreateInput";
import { Experiment } from "./Experiment";
import { ExperimentFindManyArgs } from "./ExperimentFindManyArgs";
import { ExperimentWhereUniqueInput } from "./ExperimentWhereUniqueInput";
import { ExperimentUpdateInput } from "./ExperimentUpdateInput";

export class ExperimentControllerBase {
  constructor(protected readonly service: ExperimentService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Experiment })
  async createExperiment(
    @common.Body() data: ExperimentCreateInput
  ): Promise<Experiment> {
    return await this.service.createExperiment({
      data: data,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Experiment] })
  @ApiNestedQuery(ExperimentFindManyArgs)
  async experiments(@common.Req() request: Request): Promise<Experiment[]> {
    const args = plainToClass(ExperimentFindManyArgs, request.query);
    return this.service.experiments({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Experiment })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async experiment(
    @common.Param() params: ExperimentWhereUniqueInput
  ): Promise<Experiment | null> {
    const result = await this.service.experiment({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Experiment })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateExperiment(
    @common.Param() params: ExperimentWhereUniqueInput,
    @common.Body() data: ExperimentUpdateInput
  ): Promise<Experiment | null> {
    try {
      return await this.service.updateExperiment({
        where: params,
        data: data,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Experiment })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteExperiment(
    @common.Param() params: ExperimentWhereUniqueInput
  ): Promise<Experiment | null> {
    try {
      return await this.service.deleteExperiment({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
